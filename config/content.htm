<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41123236">https://github.com/mdecp2024/hw-41123236</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41123236">https://mdecp2024.github.io/hw-41123236</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><span>說明如何利用 ShareX 與 Zoomit 拍攝電腦操作流程影片:</span></p>
<p><a href="https://nfuedu-my.sharepoint.com/personal/41123236_nfu_edu_tw/_layouts/15/stream.aspx?id=%2Fpersonal%2F41123236%5Fnfu%5Fedu%5Ftw%2FDocuments%2FRecording%2D20241024%5F153553%2Ewebm&amp;referrer=StreamWebApp%2EWeb&amp;referrerScenario=AddressBarCopied%2Eview%2Ecf7bfdad%2D9993%2D4216%2D9d5b%2Df9aae2bddf8c">Recording-20241024_153553.webm</a></p>
<p><span>示範如何加入 Brython 頁面, 並用來編寫 print 與 for 迴圈相關程式:</span></p>
<p><span><a href="https://nfuedu-my.sharepoint.com/personal/41123236_nfu_edu_tw/_layouts/15/stream.aspx?id=%2Fpersonal%2F41123236%5Fnfu%5Fedu%5Ftw%2FDocuments%2F%E6%AD%A3%E5%9C%A8%E9%8C%84%E8%A3%BD%2D20241024%5F154917%2Ewebm&amp;nav=%7B%22defaultNavPanel%22%3A%7B%22pluginName%22%3A%22MediaSettingsLayer%22%7D%7D&amp;referrer=StreamWebApp%2EWeb&amp;referrerScenario=AddressBarCopied%2Eview%2Ea8373e8c%2D2e1c%2D4577%2Da6e3%2D4b71aa0355ae">正在錄製-20241024_154917.webm</a></span></p>
<h3>w10</h3>
<p class="style-scope ytd-watch-metadata"><yt-formatted-string class="style-scope ytd-watch-metadata" force-default-style="">國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一</yt-formatted-string></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Pl5SS14arCw" width="560"></iframe></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QGH2tVAYt3w" width="560"></iframe></span></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/G25i1z0KEck" width="560"></iframe></span></p>
<p><span>心得:</span></p>
<p><span>這個問題運用運動學方程式解決了實際場景中的物理問題，加深了對運動學公式的理解。利用 Python 實現計算過程，讓問題解決過程變得高效且精確。</span></p>
<h3><span>w11_hw</span></h3>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CGh8nXi80ss" width="560"></iframe></span></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WaBPyuPyXY4" width="560"></iframe></span></p>
<p><span>心得:</span></p>
<p>這個練習讓我加深了以下幾個方面的理解：</p>
<ol>
<li>
<p><strong>幾何計算的應用</strong>：</p>
<ul>
<li>利用數學公式判斷點是否在圓內，是程式中最核心的部分。這種幾何邏輯也可應用於更多圖形處理場景，例如圖像處理或遊戲開發。</li>
</ul>
</li>
<li>
<p><strong>雙重迴圈的使用</strong>：</p>
<ul>
<li>透過雙重迴圈實現對 2D 區域的掃描。這種方式常見於網格操作、畫布繪圖等應用場景。</li>
</ul>
</li>
<li>
<p><strong>Python 與網頁的整合</strong>：</p>
<ul>
<li>借助 Brython，可以直接在網頁中執行 Python 程式，並展示結果。這對於學習者來說提供了便捷的互動環境。</li>
</ul>
</li>
<li>
<p><strong>挑戰與解決</strong>：</p>
<ul>
<li>雖然這個任務不難，但需要注意數學公式與程式邏輯的結合，特別是處理浮點數的精度問題。</li>
</ul>
</li>
</ol>
<p>未來，我希望能進一步將這類圖形輸出與更高階的圖形庫結合，例如用 <code>matplotlib</code> 或 WebGL 來實現更複雜的圖形生成。</p>
<h3>w12_hw</h3>
<p>執行點單的Python <code>for</code> 迴圈</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/oRfH7SPAY98" width="560"></iframe></p>
<h3><span>w13_hw</span></h3>
<p>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/dnPoQsU4EIs" width="560"></iframe>心得:</span><span><br/></span></p>
<p>在這次的程式設計中，我利用 Brython 來進行網頁上的圖形繪製，這對我來說是一個很有趣的挑戰，因為它結合了 Python 語言和前端網頁開發技術。以下是我在製作過程中的一些心得體會：</p>
<ol>
<li>
<p><strong>理解 Canvas API</strong>： 最初，使用 HTML5 的 <code>canvas</code> 元素進行圖形繪製並不簡單。雖然 HTML5 的 <code>&lt;canvas&gt;</code> 提供了強大的繪圖功能，但我需要花時間理解 <code>getContext("2d")</code> 的用法以及如何設置繪圖上下文來進行繪製。透過這次實作，我對 <code>canvas</code> 的基本操作和圖形處理有了更深的理解，並學會了如何繪製矩形、圓形以及如何設置不同的顏色和透明度。</p>
</li>
<li>
<p><strong>色彩運用</strong>： 顏色的選擇和搭配是這次程式中最具挑戰性的一部分。為了避免顏色重複，我挑選了多種具有區別性的顏色，並使用了半透明的 RGBA 顏色模式來創建更具層次感的效果。這不僅增強了視覺效果，還讓圖形之間的重疊部分顯得更加自然。顏色的選擇對於圖形間的互動性和可讀性至關重要。</p>
</li>
<li>
<p><strong>圖形重疊與交互</strong>： 這次的程式不僅僅是單純的繪製圖形，還涉及到如何處理不同形狀的重疊和交錯。矩形與圓形的重疊讓我對圖形的疊加效果有了更深入的思考。這些重疊區域的顏色運用和透明度設置創造了不同層次的視覺效果，使得整體圖形不會顯得過於單調。</p>
</li>
<li>
<p><strong>程式碼結構與可讀性</strong>： 在寫這段程式碼時，我注重了程式碼的可讀性與結構，對每一段功能進行了清晰的註解。這樣的做法不僅有助於自己未來的維護，也方便他人理解和修改程式。程式碼結構清晰，變數命名簡潔明瞭，讓整體邏輯一目了然。</p>
</li>
<li>
<p><strong>學到的技巧</strong>：</p>
<ul>
<li>如何使用 <code>canvas</code> 的 <code>beginPath()</code> 和 <code>stroke()</code> 方法來繪製多個圖形。</li>
<li>如何利用 <code>fillStyle</code> 設置填充顏色，並透過 <code>rgba()</code> 函數控制透明度。</li>
<li>圓形與矩形的互動設計，尤其是在不同圖形的交疊區域中的顏色調整。</li>
<li>在動態網頁中運用 Python 進行圖形繪製，這使我更加熟悉了 Brython 的應用。</li>
</ul>
</li>
</ol>
<h4></h4>
<p>心得:這次的程式設計讓我更深入理解了前端開發中的繪圖技術。儘管 Canvas API 的學習過程中有些挑戰，但通過不斷的實踐，我成功創建了一個多層次的圖形畫布，並且學會了如何使用不同的顏色與形狀來表達複雜的視覺效果。這對我未來進行更多前端開發工作提供了很好的基礎。</p>
<h3><span>w14_hw</span></h3>
<p><span>請根據兩個圓繪圖所圍成的區域(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CPeeF-d4PiA" width="560"></iframe></span></p>
<h3>w15</h3>
<p><span>題目一:<a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/5c0c44cd684a5a990436f77236444980/raw/de3ddf7e12f093b4b716f2bed104bc5445e8807f/1-100.py">從1累加到100</a></span></p>
<p><span>題目一心得:</span></p>
<p data-pm-slice="1 1 []"><span>這次練習的目的是透過 Gist 和 Brython，在課程網站上新增一個互動頁面。此頁面的重點功能是實作一個可以計算 "從 1 累加到 100" 的 Python 程式，並讓使用者透過網站介面執行 Brython 程式。藉此，我學習了如何結合 Brython 和 HTML，以實現動態網頁互動的功能。</span></p>
<p><span>題目二:<a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/5c0c44cd684a5a990436f77236444980/raw/de3ddf7e12f093b4b716f2bed104bc5445e8807f/1-100.py">addto</a></span></p>
<p><span>題目二心得:</span></p>
<p data-pm-slice='1 1 ["list",{"spread":true,"start":51,"end":325},"regular_list_item",{"start":205,"end":325}]'><span>設計了一個函式 </span><code><span>addto(start, end)</span></code><span>，可以接受使用者輸入的範圍（如 1 到 100），計算指定範圍內的累加結果，並在頁面中動態顯示結果。此函式被設定為另一個超連結，標題為 "addto"，用於展示這個進階功能。</span></p>
<p><span>題目三:<a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/5c0c44cd684a5a990436f77236444980/raw/de3ddf7e12f093b4b716f2bed104bc5445e8807f/1-100.py">add_only_even</a></span></p>
<p><span>題目三心得:</span></p>
<p data-pm-slice='1 1 ["list",{"spread":true,"start":51,"end":448},"regular_list_item",{"start":327,"end":448}]'><span>新增了一個函式 </span><code><span>add_only_even(start, end)</span></code><span>，用於計算從第一個輸入整數到第二個輸入整數範圍內的所有偶數累加結果，並將其連結標題設置為 "add_only_even"。這個功能進一步提升了互動性與應用靈活性。</span></p>
<p><span>題目四:<a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/16703ec78594abd39cb4e2737d102117/raw/f033f7537986afd8540187716d69476d338940b2/15w%2520hw4.py">add_avoid_8</a></span></p>
<p><span>題目四心得:</span></p>
<p data-pm-slice='1 1 ["list",{"spread":true,"start":51,"end":589},"regular_list_item",{"start":450,"end":589}]'><span>設計了一個函式 </span><code><span>add_avoid_8(start, end)</span></code><span>，實現計算從第一個輸入整數到第二個輸入整數範圍內的累加結果，但必須避開任何包含數字 "8" 的整數（例如 8、18、28 等）。此功能的連結標題為 "add_avoid_8"，提供了更加細緻的操作控制。</span></p>
<p><span>題目五:<a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/5fc8323dfa4949f0cf909d00fd0298be/raw/f93dae22f94d77d684687e56b4efec9c25378f1a/w15%2520hw5.py">add_avoid_3and8</a></span></p>
<p><span>題目五心得:</span></p>
<p data-pm-slice='1 1 ["list",{"spread":true,"start":51,"end":703},"regular_list_item",{"start":591,"end":703}]'><span>對 </span><code><span>add_avoid_8</span></code><span> 函式進行擴展，設計了一個可同時避開數字 "3" 和 "8" 的版本，並保留相同的連結標題 "add_avoid_8"。此版本的函式讓累加過程更加靈活，能更精確地過濾掉特定數字的影響。</span></p>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3><span>w16_exam1</span></h3>
<p><span>w16_exam1 隨堂考試</span></p>
<p><span>圖像連結</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/56d78808307253da8e06dd47b4ea1e3c/raw/576e42abb3c4bb265e72b26b771fcb026c677d0d/HW%25202%2520Exam">https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/56d78808307253da8e06dd47b4ea1e3c/raw/576e42abb3c4bb265e72b26b771fcb026c677d0d/HW%25202%2520Exam</a></span></p>
<p><span>操作影片</span></p>
<p><span><a href="https://youtu.be/xm5cHzJe91g?si=K0GY0zD3xhQkc3AE">https://youtu.be/xm5cHzJe91g?si=K0GY0zD3xhQkc3AE</a></span></p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span>w16_exam2 隨堂考試</span></p>
<p><span>圖像連結</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/b3b69101a1460cfd5aa42ab506285e27/raw/4eaa3967a53a1504d1eccb9bffe43613516f0cb6/HW%25203%2520Exam">https://mdecp2024.github.io/hw-41123236/content/Brython.html?src=https://gist.githubusercontent.com/41123236/b3b69101a1460cfd5aa42ab506285e27/raw/4eaa3967a53a1504d1eccb9bffe43613516f0cb6/HW%25203%2520Exam</a></span></p>
<p><span>操作影片</span></p>
<p><span><a href="https://youtu.be/ciO0Ypjr5RA?si=vV3ynB_OGSfagNgr">https://youtu.be/ciO0Ypjr5RA?si=vV3ynB_OGSfagNgr</a></span></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>